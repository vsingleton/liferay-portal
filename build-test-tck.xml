<?xml version="1.0"?>

<project basedir="." default="test" name="portal-test-tck" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<if>
		<or>
			<os family="mac" />
			<os family="unix" />
		</or>
		<then>
			<exec executable="/bin/bash" resultproperty="which.mvn.result" outputproperty="which.mvn.output">
				<arg value="-c" />
				<arg value="which mvn" />
			</exec>
			<if>
				<equals arg1="${which.mvn.result}" arg2="0" />
					<then>
						<exec executable="/bin/bash" resultproperty="mvn.home.result" outputproperty="maven.home">
							<arg value="-c" />
							<arg value="mvn --version | perl -lne '/^Maven home:/ and @_ = split and print $_[-1]'" />
						</exec>
					</then>
			</if>
		</then>
	</if>

	<if>
		<isset property="env.M2_HOME" />
		<then>
			<property name="maven.home" value="${env.M2_HOME}" />
		</then>
		<elseif>
			<isset property="env.MAVEN_HOME" />
			<then>
				<property name="maven.home" value="${env.MAVEN_HOME}" />
			</then>
		</elseif>
	</if>

	<fail message="Please set the property ${maven.home}." unless="maven.home" />
	<fail message="Please set the property ${tck.home}." unless="tck.home" />

	<condition else="${tck.home}/.." property="portals.pluto.dir" value="${portals.pluto.dir}">
		<isset property="portals.pluto.dir" />
	</condition>

	<condition else="${tck.home}/deploy/target/deploy-files" property="tck.deploy.files" value="${tck.deploy.files}">
		<isset property="tck.deploy.files" />
	</condition>

	<condition else="tck-V2*" property="test.context" value="${test.context}">
		<isset property="test.context" />
	</condition>

	<path id="maven.classpath">
		<fileset dir="${maven.home}/boot" includes="*.jar" />
		<fileset dir="${maven.home}/lib" includes="*.jar" />
	</path>

	<macrodef name="maven">
		<attribute name="basedir" />
		<attribute name="goal" />
		<attribute default=""  name="options" />
		<attribute default="maven.result" name="resultproperty" />
		<element implicit="true" name="args" optional="true" />

		<sequential>
			<java
				dir="@{basedir}"
				classname="org.codehaus.classworlds.Launcher"
				fork="true"
				resultproperty="@{resultproperty}"
			>
				<jvmarg value="-Xmx512m" />
				<jvmarg value="-Dmaven.multiModuleProjectDirectory=@{basedir}" />
				<classpath refid="maven.classpath" />
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
		</sequential>
	</macrodef>

	<target name="clean-up-tck-dependencies">
		<delete file="${liferay.home}/.continue" />
		<delete file=".testable.portal.started" />
	</target>

	<target name="deploy-portlet-tck-bridge">
		<var name="tck.servlet.context.names" value="" />

		<for param="tck.war">
			<path>
				<fileset
					dir="${tck.deploy.files}"
					excludes="**/tck-WarThatYouWouldLikeToExclude-*.war"
					includes="**/${test.context}-*.war"
				/>
			</path>
			<sequential>
				<local name="tck.war.basename" />

				<basename file="@{tck.war}" property="tck.war.basename" suffix=".war" />

				<local name="tck.servlet.context.name" />

				<propertyregex
					global="true"
					input="${tck.war.basename}"
					property="tck.servlet.context.name"
					regexp="-\d..*"
					replace=""
				/>

				<if>
					<equals arg1="${tck.servlet.context.names}" arg2="" />
					<then>
						<var name="tck.servlet.context.names" value="${tck.servlet.context.name}" />
					</then>
					<else>
						<var name="tck.servlet.context.names" value="${tck.servlet.context.names}|${tck.servlet.context.name}" />
					</else>
				</if>

				<echo>Copying '@{tck.war}' to '${liferay.home}/deploy/${tck.servlet.context.name}.war'</echo>

				<copy file="@{tck.war}" tofile="${liferay.home}/deploy/${tck.servlet.context.name}.war" />

				<!-- check for additional wars to deploy, if any -->
				<if>
					<not>
						<equals arg1="${test.context}" arg2="tck-V2*" />
					</not>
					<then>

						<propertyregex
							input="${test.context}"
							property="test.war"
							regexp="tck-"
							replace=""
						/>

						<length string="${tck.home}" property="len.tck.home" />

						<var name="test.cases"
							value="${tck.home}/*/src/main/resources/xml-resources/additionalTCs.xml" />

						<exec executable="/bin/bash" outputproperty="additional.contexts">
							<arg value="-c" />
							<arg value="grep -l ${test.war} ${test.cases} | grep -v ${test.war} | cut -c${len.tck.home}- | cut -d\/ -f2" />
						</exec>

						<if>
							<not>
								<equals arg1="${additional.contexts}" arg2="" />
							</not>
							<then>
								<propertyregex
									global="true"
									input="${additional.contexts}"
									property="csv.contexts"
									regexp="\n"
									replace=","
								/>
								<for list="${csv.contexts}" param="context">
									<sequential>
										<var name="tck.servlet.context.names" value="${tck.servlet.context.names}|tck-@{context}" />

										<exec executable="/bin/bash" outputproperty="additional.war.file">
											<arg value="-c" />
											<arg value="ls ${tck.deploy.files}/tck-@{context}-*.war" />
										</exec>

										<echo>Copying '${additional.war.file}' to '${liferay.home}/deploy/tck-@{context}.war'</echo>

										<copy file="${additional.war.file}" tofile="${liferay.home}/deploy/tck-@{context}.war" />

										<var name="additional.war.file" unset="true" />
									</sequential>
								</for>
							</then>
						</if>
					</then>
				</if>
			</sequential>
		</for>

		<var name="exclude.war.names" value="" />

		<for param="tck.war">
			<path>
				<fileset
					dir="${tck.deploy.files}"
					excludes="**/${test.context}-*.war"
					includes="**/${test.context}*.war"
				/>
			</path>
			<sequential>
				<local name="tck.war.basename" />

				<basename file="@{tck.war}" property="tck.war.basename" suffix=".war" />

				<local name="exclude.war.name" />

				<propertyregex
					global="true"
					input="${tck.war.basename}"
					property="exclude.war.name"
					regexp="-\d..*"
					replace=""
				/>

				<propertyregex
					global="true"
					input="${exclude.war.name}"
					override="true"
					property="exclude.war.name"
					regexp="tck-"
					replace=""
				/>

				<if>
					<equals arg1="${exclude.war.names}" arg2="" />
					<then>
						<var name="exclude.war.names" value="${exclude.war.name}" />
					</then>
					<else>
						<var name="exclude.war.names" value="${exclude.war.names}|${exclude.war.name}" />
					</else>
				</if>
			</sequential>
		</for>

		<echo file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.configuration.PortletTCKBridgeConfiguration.cfg">excludeWarNames=${exclude.war.names}

handshakeServerPort=${portlet.tck.bridge.handshake.port}

servletContextNames=${tck.servlet.context.names}

testContext=${test.context}

tckDeployFiles=${tck.deploy.files}</echo>

		<print-file file.name="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.configuration.PortletTCKBridgeConfiguration.cfg" />

		<gradle-execute dir="modules/test/portlet-tck-bridge" task="deploy" />

		<if>
			<available file=".testable.portal.started" />
			<then>
				<waitfor checkevery="100" checkeveryunit="millisecond" maxwait="9" maxwaitunit="minute" timeoutproperty="portlet.tck.bridge.deployment.timeout">
					<socket port="${portlet.tck.bridge.handshake.port}" server="localhost" />
				</waitfor>

				<if>
					<isset property="portlet.tck.bridge.deployment.timeout" />
					<then>
						<for param="logfile">
							<path>
								<fileset dir="${liferay.home}/logs" includes="*.log" />
							</path>
							<sequential>
								<print-file file.name="@{logfile}" />
							</sequential>
						</for>

						<fail message="Timeout while waiting for portlet-tck-bridge to deploy." />
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="deploy-portlet-tck-theme">
		<gradle-execute dir="modules/test/portlet-tck-theme" task="deploy" />
	</target>

	<target name="prepare-portlet-tck">
		<antcall target="undeploy-chat-portlet" />

		<antcall target="clean-up-tck-dependencies" />

		<antcall target="prepare-tck-portal-ext-properties" />

		<antcall target="prepare-portal-ssl" />

		<prepare-chrome-driver />

		<antcall target="undeploy-portlet-tck-bridge" />

		<delete file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.configuration.PortletTCKBridgeConfiguration.cfg" />
	</target>

	<target name="prepare-tck">
		<echo>mvn -P liferay clean install</echo>
		<maven
			basedir="${portals.pluto.dir}"
			goal="clean install"
			options="-P liferay"
		/>

	</target>

	<target name="prepare-tck-portal-ext-properties">
		<delete file="${liferay.home}/portal-ext.properties" />

		<echo append="true" file="${liferay.home}/portal-ext.properties"># written by build-test-tck.xml

browser.launcher.url=

javascript.single.page.application.enabled=false

module.framework.auto.deploy.interval=2000

module.framework.web.generator.generated.wabs.store=true

setup.wizard.enabled=false

terms.of.use.required=false

theme.portlet.decorate.default=false

users.reminder.queries.enabled=false

web.server.https.port=8443
		</echo>

		<print-file file.name="${liferay.home}/portal-ext.properties" />
	</target>

	<target name="record-test-tck-class-groups">
		<fail message="Please set the property ${test.class.groups.size}." unless="test.class.groups.size" />

		<beanshell>
			<![CDATA[
				import org.apache.tools.ant.DirectoryScanner;

				List getTestClassGroups(int groupsSize) {
					List tckWarFileNames = getTCKWarFileNames();

					List testClassGroups = new ArrayList(groupsSize);

					for (int i = 0; i < groupsSize; i++) {
						testClassGroups.add(new ArrayList());
					}

					for (int i = 0; i < tckWarFileNames.size(); i++) {
						List testClassGroup = testClassGroups.get(i % groupsSize);

						testClassGroup.add(tckWarFileNames.get(i));
					}

					return testClassGroups;
				}

				List getTCKWarFileNames() {
					DirectoryScanner directoryScanner = new DirectoryScanner();

					directoryScanner.setBasedir(new File(project.getProperty("tck.deploy.files")));
					directoryScanner.setIncludes(new String[] {"tck-V2*.war"});

					directoryScanner.scan();

					String[] fileNames = directoryScanner.getIncludedFiles();

					Arrays.sort(fileNames);

					List tckWarFileNames = new ArrayList();

					for (String fileName : fileNames) {
						int x = fileName.lastIndexOf(File.separator) + 1;

						fileName = fileName.substring(x);

						fileName = fileName.replaceAll("-[\\d\\.]+-\\w+.war", "");

						tckWarFileNames.add(fileName);
					}

					return tckWarFileNames;
				}

				int testClassGroupsSize = Integer.parseInt(project.getProperty("test.class.groups.size"));

				List testClassGroups = getTestClassGroups(testClassGroupsSize);

				StringBuilder sb = new StringBuilder();

				for (int i = 0; i < testClassGroupsSize; i++) {
					List testClassGroup = testClassGroups.get(i);

					sb.append("TEST_CLASS_GROUP_");
					sb.append(i);
					sb.append("=");

					for (String testClass : testClassGroup) {
						sb.append(testClass);
						sb.append(",");
					}

					if (!testClassGroup.isEmpty()) {
						sb.setLength(sb.length() - 1);
					}

					sb.append("\n\n");
				}

				sb.append("TEST_CLASS_GROUPS=");

				for (int i = 0; i < testClassGroupsSize; i++) {
					sb.append(i);
					sb.append(" ");
				}

				if (testClassGroupsSize > 0) {
					sb.setLength(sb.length() - 1);
				}

				project.setProperty("test.tck.class.groups", sb.toString());
			]]>
		</beanshell>

		<echo file="test.tck.class.groups.properties">${test.tck.class.groups}</echo>

		<print-file file.name="test.tck.class.groups.properties" />
	</target>

	<target depends="prepare-portlet-tck" name="run-tck-tomcat">
		<antcall target="start-app-server">
			<param name="testable.portal.started.marker.file" value=".testable.portal.started" />
		</antcall>

		<if>
			<not>
				<isset property="skip.deploys" />
			</not>
			<then>
				<antcall target="deploy-portlet-tck-theme" />
			</then>
		</if>

		<antcall target="test-class" />

		<antcall target="clean-up-tck-dependencies" />
	</target>

	<target name="test-class">

		<if>
			<not>
				<isset property="skip.deploys" />
			</not>
			<then>
				<antcall target="deploy-portlet-tck-bridge" />
			</then>
		</if>

		<if>
			<equals arg1="${test.context}" arg2="tck-V2*" />
			<then>
				<property name="starts.with" value="" />
			</then>
			<else>
				<condition else="_" property="starts.with" value="${starts.with}">
					<isset property="starts.with" />
				</condition>
			</else>
		</if>

		<condition else="${test.context}" property="test.module.context" value="tck-V2">
			<equals arg1="${test.context}" arg2="tck-V2*" />
		</condition>

		<propertyregex
			global="true"
			input="${test.module.context}"
			property="module.no.tck.dash"
			regexp="tck-"
			replace=""
		/>

		<var name="test.arguments" value="" />

		<if>
			<not>
				<isset property="test.browser" />
			</not>
			<then>
				<property name="test.browser" value="${browser.type}" />

				<if>
					<isset property="browser.${browser.type}.bin.file[${browser.version}]" />
					<then>
						<propertycopy from="browser.${browser.type}.bin.file[${browser.version}]" name="test.browser.binary" silent="true" />
					</then>
				</if>
			</then>
		</if>

		<if>
			<equals arg1="${test.browser}" arg2="phantomjs" />
			<then>
				<fail message="Please set the property ${test.browser.binary}." unless="test.browser.binary" />
			</then>
		</if>

		<var name="test.arguments" value="${test.arguments} -Dtest.browser='${test.browser}'" />

		<if>
			<isset property="test.browser.binary" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.browser.binary='${test.browser.binary}'" />
			</then>
		</if>

		<if>
			<isset property="test.browser.headless" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.browser.headless='${test.browser.headless}'" />
			</then>
		</if>

		<if>
			<isset property="test.browser.webDriver" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.browser.webDriver='${test.browser.webDriver}'" />
			</then>
			<else>
				<if>
					<equals arg1="${test.browser}" arg2="chrome" />
					<then>
						<var name="test.arguments" value="${test.arguments} -Dtest.browser.webDriver='${project.dir}/tools/selenium/chromedriver'" />
					</then>
				</if>
			</else>
		</if>

		<if>
			<isset property="test.context.base" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.context.base='${test.context.base}'" />
			</then>
		</if>

		<if>
			<isset property="test.server.login.url" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.server.login.url='${test.server.login.url}'" />
			</then>
		</if>

		<if>
			<isset property="test.server.username.id" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.server.username.id='${test.server.username.id}'" />
			</then>
		</if>

		<if>
			<isset property="test.server.username" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.server.username='${test.server.username}'" />
			</then>
		</if>

		<if>
			<isset property="test.server.password.id" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.server.password.id='${test.server.password.id}'" />
			</then>
		</if>

		<if>
			<isset property="test.server.password" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.server.password='${test.server.password}'" />
			</then>
		</if>

		<if>
			<isset property="test.timeout" />
			<then>
				<var name="test.arguments" value="${test.arguments} -Dtest.timeout='${test.timeout}'" />
			</then>
		</if>

		<condition else="-Dtest.module=${module.no.tck.dash}${starts.with}" property="test.module.option" value="${test.module.option}">
			<isset property="test.module.option" />
		</condition>

		<if>
			<isset property="wait.for.continue" />
			<then>
				<waitfor maxwait="30" maxwaitunit="minute">
					<available file="${liferay.home}/.continue" />
				</waitfor>
			</then>
		</if>

		<echo>mvn -Pliferay,run-tck -Djava.awt.headless=true ${test.arguments} ${test.module.option} test</echo>
		<maven
			basedir="${tck.home}"
			goal="test"
			options="-Pliferay,run-tck -Djava.awt.headless=true ${test.arguments} ${test.module.option}"
		/>
		<if>
			<equals arg1="${maven.result}" arg2="0" />
			<then>
				<echo message="PASSED: maven.result = ${maven.result}" />
			</then>
			<else>
				<echo message="FAILED: maven.result = ${maven.result}" />
			</else>
		</if>

		<if>
			<available file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKSimpleTestDriver.xml" />
			<then>
				<mkdir dir="${project.dir}/tck/test-results" />

				<copy
					file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKSimpleTestDriver.xml"
					tofile="${project.dir}/tck/test-results/TEST-javax.portlet.tck.driver.TCKSimpleTestDriver-${test.context}.xml"
				/>
			</then>
		</if>
	</target>

	<target depends="prepare-portlet-tck" name="test-class-group">
		<fail message="Please set the property ${test.class.group.index}." unless="test.class.group.index" />

		<property file="${project.dir}/test.tck.class.groups.properties" />

		<propertycopy from="TEST_CLASS_GROUP_${test.class.group.index}" name="test.class.group" />

		<if>
			<not>
				<equals arg1="${test.class.group}" arg2="" />
			</not>
			<then>
				<antcall target="start-app-server">
					<param name="testable.portal.started.marker.file" value=".testable.portal.started" />
				</antcall>

				<antcall target="deploy-portlet-tck-theme" />

				<for list="${test.class.group}" param="test.class">
					<sequential>
						<local name="test.context" />

						<antcall target="test-class">
							<param name="test.context" value="@{test.class}" />
						</antcall>
					</sequential>
				</for>

				<antcall target="clean-up-tck-dependencies" />
			</then>
		</if>
	</target>

	<target name="undeploy-chat-portlet">
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.api.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.service.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.web.jar" />
	</target>

	<target name="undeploy-portlet-tck-bridge">
		<delete file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.jar" />

		<waitfor checkevery="100" checkeveryunit="millisecond" maxwait="1" maxwaitunit="minute" timeoutproperty="portlet.tck.bridge.undeployment.timeout">
			<not>
				<socket port="${portlet.tck.bridge.handshake.port}" server="localhost" />
			</not>
		</waitfor>

		<if>
			<isset property="portlet.tck.bridge.undeployment.timeout" />
			<then>
				<fail message="Timeout while waiting for portlet-tck-bridge to undeploy." />
			</then>
		</if>
	</target>
</project>
