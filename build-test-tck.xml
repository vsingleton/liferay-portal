<?xml version="1.0"?>

<project basedir="." default="test" name="portal-test-tck" xmlns:antelope="antlib:ise.antelope.tasks">

	<!-- deploy all wars and run all tests -->
	<!-- ant -Dtck.home=/path/to/portlet-tck_3.0 -f build-test-tck.xml run-tck-tomcat -->

	<!-- deploy one war called tck-V2PortletTagLibraryTests-3.0.1-SNAPSHOT.war, and run all its tests  -->
	<!-- ant -Dtck.home=/path/to/portlet-tck_3.0 -Dtest.context=tck-V2PortletTagLibraryTests -Dstarts.with=_ -f build-test-tck.xml run-tck-tomcat -->

	<!-- deploy one war called tck-V2PortletTagLibraryTests-3.0.1-SNAPSHOT.war, and run tests for specifications starting with _SPEC2_26_IncludeJSPGeneral -->
	<!-- ant -Dtck.home=/path/to/portlet-tck_3.0 -Dtest.context=tck-V2PortletTagLibraryTests -Dstarts.with=_SPEC2_26_IncludeJSPGeneral -f build-test-tck.xml run-tck-tomcat -->
	<!-- currently ... Tests run: 5, Failures: 2, Errors: 0, Skipped: 0 -->
	<!-- causing both server log errors and test failures -->

	<!-- deploy one war called tck-V2SigTestsFilter-3.0.1-SNAPSHOT.war, and run all its test (which will start with an _) -->
	<!-- ant -Dtck.home=/path/to/portlet-tck_3.0 -Dtest.context=tck-V2SigTestsFilter -Dstarts.with=_ -f build-test-tck.xml run-tck-tomcat -->
	<!-- this will start Liferay, deploy the necessary war, add all its portlets to the appropriate page, and run the following mvn command -->
	<!-- mvn -Prun-tck -Djava.awt.headless=true -Dtest.module=V2SigTestsFilter_ test -->
	<!-- currently ... Tests run: 32, Failures: 0, Errors: 0, Skipped: 0 -->

	<import file="build-test.xml" />

	<if>
		<isset property="env.M2_HOME" />
		<then>
			<property name="maven.home" value="${env.M2_HOME}" />
		</then>
		<elseif>
			<isset property="env.MAVEN_HOME" />
			<then>
				<property name="maven.home" value="${env.MAVEN_HOME}" />
			</then>
		</elseif>
	</if>

	<fail message="Please set the property ${maven.home}." unless="maven.home" />
	<fail message="Please set the property ${tck.home}." unless="tck.home" />

	<path id="maven.classpath">
		<fileset dir="${maven.home}/boot" includes="*.jar" />
		<fileset dir="${maven.home}/lib" includes="*.jar" />
	</path>

	<macrodef name="maven">
		<attribute name="basedir" />
		<attribute name="goal" />
		<attribute default=""  name="options" />
		<attribute default="maven.result" name="resultproperty" />
		<element implicit="true" name="args" optional="true" />

		<sequential>
			<java
				dir="@{basedir}"
				classname="org.codehaus.classworlds.Launcher"
				fork="true"
				resultproperty="@{resultproperty}"
			>
				<jvmarg value="-Xmx512m" />
				<jvmarg value="-Dmaven.multiModuleProjectDirectory=@{basedir}" />
				<classpath refid="maven.classpath" />
				<sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${maven.home}" />
				<arg line="--batch-mode @{options} @{goal}" />
			</java>
		</sequential>
	</macrodef>

	<target name="clean-up-tck-dependencies">
		<delete file="${liferay.home}/.continue" />
		<delete file=".testable.portal.started" />

		<antcall target="undeploy-portlet-tck-bridge" />

		<antcall target="undeploy-portlet-tck-theme" />

		<antcall target="undeploy-tck-wars" />
	</target>

	<target name="prepare-tck-portal-ext-properties">
		<delete file="${liferay.home}/portal-ext.properties" />

		<echo append="true" file="${liferay.home}/portal-ext.properties"># written by build-test-tck.xml

browser.launcher.url=

javascript.single.page.application.enabled=false

module.framework.auto.deploy.interval=2000

module.framework.web.generator.generated.wabs.store=true

setup.wizard.enabled=false

terms.of.use.required=false

theme.portlet.decorate.default=false

users.reminder.queries.enabled=false
		</echo>
	</target>

	<target name="deploy-portlet-tck-bridge">
		<gradle-execute dir="modules/test/portlet-tck-bridge" task="deploy" />

		<if>
			<available file=".testable.portal.started" />
			<then>
				<waitfor checkevery="100" checkeveryunit="millisecond" maxwait="9" maxwaitunit="minute" timeoutproperty="portlet.tck.bridge.deployment.timeout">
					<socket port="${portlet.tck.bridge.handshake.port}" server="localhost" />
				</waitfor>

				<if>
					<isset property="portlet.tck.bridge.deployment.timeout" />
					<then>
						<for param="logfile">
							<path>
								<fileset dir="${liferay.home}/logs" includes="*.log" />
							</path>
							<sequential>
								<local name="logfile.content" />

								<loadfile property="logfile.content" srcFile="@{logfile}" />

								<echo>File content for ${liferay.home}/logs/@{logfile}:
${logfile.content}
								</echo>
							</sequential>
						</for>

						<fail message="Timeout while waiting for portlet-tck-bridge to deploy." />
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="deploy-portlet-tck-theme">
		<gradle-execute dir="modules/test/portlet-tck-theme" task="deploy" />
	</target>

	<target name="prepare-portlet-tck">
		<if>
			<not>
				<isset property="tck.deploy.files" />
			</not>
			<then>
				<property name="tck.deploy.files" value="${tck.home}/deploy/target/deploy-files" />
			</then>
		</if>

		<antcall target="undeploy-chat-portlet" />

		<antcall target="undeploy-portlet-tck-bridge" />

		<antcall target="undeploy-portlet-tck-theme" />

		<antcall target="prepare-tck-portal-ext-properties" />

		<antcall target="deploy-portlet-tck-theme" />

		<var name="tck.servlet.context.names" value="" />
		<var name="exclude.war.names" value="" />

		<!-- TODO improve tck- war magic below ... choke included tck wars to V2* only for now -->

		<if>
			<not>
				<isset property="test.context" />
			</not>
			<then>
				<property name="test.context" value="tck-V2*" />
			</then>
		</if>

		<for param="tck.war">
			<path>
				<fileset
					dir="${tck.deploy.files}"
					excludes="**/tck-WarThatYouWouldLikeToExclude-*.war"
					includes="**/${test.context}-*.war"
				/>
			</path>
			<sequential>
				<local name="tck.servlet.context.name" />

				<echo>tck.war=@{tck.war}</echo>

				<var name="tck.war.basename" unset="true" />

				<basename file="@{tck.war}" property="tck.war.basename" suffix=".war" />

				<echo>tck.war.basename=${tck.war.basename}</echo>

				<var name="tck.no.version" unset="true" />

				<propertyregex
					global="true"
					input="${tck.war.basename}"
					property="tck.no.version"
					regexp="-\d..*"
					replace=""
				/>

				<echo>tck.no.version=${tck.no.version}</echo>

				<if>
					<equals arg1="${tck.servlet.context.names}" arg2="" />
					<then>
						<var name="tck.servlet.context.names" value="${tck.no.version}" />
					</then>
					<else>
						<var name="tck.servlet.context.names" value="${tck.servlet.context.names}|${tck.no.version}" />
					</else>
				</if>

				<echo>cp @{tck.war} ${liferay.home}/deploy/${tck.no.version}.war</echo>

				<copy file="@{tck.war}" tofile="${liferay.home}/deploy/${tck.no.version}.war" />
			</sequential>
		</for>

		<for param="tck.war">
			<path>
				<fileset
					dir="${tck.deploy.files}"
					excludes="**/${test.context}-*.war"
					includes="**/${test.context}*.war"
				/>
			</path>
			<sequential>
				<local name="bad.war.name" />

				<echo>tck.war=@{tck.war}</echo>

				<var name="tck.war.basename" unset="true" />

				<basename file="@{tck.war}" property="tck.war.basename" suffix=".war" />

				<echo>tck.war.basename=${tck.war.basename}</echo>

				<var name="bad.no.version" unset="true" />

				<propertyregex
					global="true"
					input="${tck.war.basename}"
					property="bad.no.version"
					regexp="-\d..*"
					replace=""
				/>

				<echo>bad.no.version=${bad.no.version}</echo>

				<var name="bad.no.tckDash" unset="true" />

				<propertyregex
					global="true"
					input="${bad.no.version}"
					property="bad.no.tckDash"
					regexp="tck-"
					replace=""
				/>

				<echo>bad.no.version=${bad.no.tckDash}</echo>

				<if>
					<equals arg1="${exclude.war.names}" arg2="" />
					<then>
						<var name="exclude.war.names" value="${bad.no.tckDash}" />
					</then>
					<else>
						<var name="exclude.war.names" value="${exclude.war.names}|${bad.no.tckDash}" />
					</else>
				</if>
			</sequential>
		</for>

		<echo file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.configuration.PortletTCKBridgeConfiguration.cfg">excludeWarNames=${exclude.war.names}

handshakeServerPort=${portlet.tck.bridge.handshake.port}

servletContextNames=${tck.servlet.context.names}

testContext=${test.context}

tckDeployFiles=${tck.deploy.files}</echo>
	</target>

	<target depends="prepare-portlet-tck" name="run-tck-tomcat">
		<antcall target="start-app-server">
			<param name="testable.portal.started.marker.file" value=".testable.portal.started" />
		</antcall>

		<antcall target="deploy-portlet-tck-bridge" />

		<if>
			<not>
				<isset property="starts.with" />
			</not>
			<then>
				<property name="starts.with" value="" />
			</then>
		</if>

		<if>
			<equals arg1="${test.context}" arg2="tck-V2*" />
			<then>
				<property name="test.module.context" value="tck-V2" />
			</then>
			<else>
				<property name="test.module.context" value="${test.context}" />
			</else>
		</if>

		<propertyregex
			global="true"
			input="${test.module.context}"
			property="module.no.tckDash"
			regexp="tck-"
			replace=""
		/>

		<echo>module.no.version=${module.no.tckDash}</echo>

		<!-- defaults in portlet-tck_3.0/pom.xml-->

		<property name="test.props" value="-Dtest.context.base=group/portlet-tck/ -Dtest.server.login.url=http://localhost:8080/group/portlet-tck -Dtest.server.username.id=_com_liferay_login_web_portlet_LoginPortlet_login -Dtest.server.username=test -Dtest.server.password.id=_com_liferay_login_web_portlet_LoginPortlet_password -Dtest.server.password=test -Dtest.browser.webDriver=/usr/local/bin/chromedriver -Dbrowser.binary=/Users/apple/Downloads/chrome-mac/Chromium.app/Contents/MacOS/Chromium -Dtest.timeout=1" />

		<echo>props=${test.props}</echo>

		<if>
			<not>
				<isset property="test.module.option" />
			</not>
			<then>
				<property name="test.module.option" value="-Dtest.module=${module.no.tckDash}${starts.with}" />
			</then>
		</if>

		<if>
			<isset property="wait.for.continue" />
			<then>
				<echo>Waiting for file ${liferay.home}/.continue ...</echo>

				<waitfor maxwait="30" maxwaitunit="minute">
					<available file="${liferay.home}/.continue" />
				</waitfor>

				<echo>either timed out, or found ${liferay.home}/.continue ... continuing ...</echo>
			</then>
		</if>

		<echo>COMMAND: mvn -Prun-tck -Djava.awt.headless=true ${test.props} ${test.module.option} test</echo>

		<maven
			basedir="${tck.home}"
			options=" -Prun-tck -Djava.awt.headless=true ${test.props} ${test.module.option}"
			goal="test"
		/>

		<echo>run-tck-tomcat: a result of 0 is success.</echo>

		<echo>run-tck-tomcat: maven.result = ${maven.result}</echo>

		<antcall target="clean-up-tck-dependencies" />
	</target>

	<target name="undeploy-chat-portlet">
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.api.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.service.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.web.jar" />
	</target>

	<target name="undeploy-portlet-tck-bridge">
		<delete file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.jar" />

		<waitfor checkevery="100" checkeveryunit="millisecond" maxwait="1" maxwaitunit="minute" timeoutproperty="portlet.tck.bridge.undeployment.timeout">
			<not>
				<socket port="${portlet.tck.bridge.handshake.port}" server="localhost" />
			</not>
		</waitfor>

		<if>
			<isset property="portlet.tck.bridge.undeployment.timeout" />
			<then>
				<fail message="Timeout while waiting for portlet-tck-bridge to undeploy." />
			</then>
		</if>
	</target>

	<target name="undeploy-portlet-tck-theme">
		<delete file="${liferay.home}/deploy/portlet-tck-theme.war" />
		<delete file="${liferay.home}/osgi/war/portlet-tck-theme.war" />
	</target>

	<target name="undeploy-tck-wars">
		<delete includeemptydirs="true">
			<fileset
				dir="${app.server.tomcat.dir}/../osgi/war"
				includes="tck-*/**"
			/>
		</delete>
	</target>
</project>